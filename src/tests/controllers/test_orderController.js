const OrderController = require('../../orders/controllers/orderController');\nconst OrderModel = require('../../orders/models/orderModel');\n\n// Mock the OrderModel\njest.mock('../../orders/models/orderModel');\n\ndescribe('OrderController', () => {\n  let req, res;\n  \n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n    \n    // Mock request and response objects\n    req = {\n      params: {},\n      body: {},\n      query: {}\n    };\n    \n    res = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn(),\n      send: jest.fn()\n    };\n  });\n  \n  const mockOrder = {\n    id: 'order-1',\n    userId: 'user-1',\n    items: [{ productId: 'product-1', name: 'Product 1', price: 10, quantity: 2 }],\n    shippingAddress: { street: '123 Main St', city: 'Test City' },\n    status: 'pending',\n    createdAt: '2023-01-01T00:00:00.000Z',\n    updatedAt: '2023-01-01T00:00:00.000Z'\n  };\n  \n  const mockOrders = [\n    mockOrder,\n    {\n      id: 'order-2',\n      userId: 'user-2',\n      items: [{ productId: 'product-2', name: 'Product 2', price: 20, quantity: 1 }],\n      shippingAddress: { street: '456 Oak St', city: 'Test City' },\n      status: 'shipped',\n      createdAt: '2023-01-02T00:00:00.000Z',\n      updatedAt: '2023-01-02T00:00:00.000Z'\n    }\n  ];\n\n  describe('getAllOrders', () => {\n    it('should return all orders with status 200', async () => {\n      OrderModel.getAllOrders.mockResolvedValue(mockOrders);\n      \n      await OrderController.getAllOrders(req, res);\n      \n      expect(OrderModel.getAllOrders).toHaveBeenCalled();\n      expect(res.json).toHaveBeenCalledWith(mockOrders);\n    });\n    \n    it('should handle errors and return status 500', async () => {\n      OrderModel.getAllOrders.mockRejectedValue(new Error('Database error'));\n      \n      await OrderController.getAllOrders(req, res);\n      \n      expect(OrderModel.getAllOrders).toHaveBeenCalled();\n      expect(res.status).toHaveBeenCalledWith(500);\n      expect(res.json).toHaveBeenCalledWith(expect.objectContaining({\n        error: 'Failed to retrieve orders'\n      }));\n    });\n  });\n\n  describe('getOrderById', () => {\n    it('should return order by ID with status 200', async () => {\n      req.params.id = 'order-1';\n      OrderModel.getOrderById.mockResolvedValue(mockOrder);\n      \n      await OrderController.getOrderById(req, res);\n      \n      expect(OrderModel.getOrderById).toHaveBeenCalledWith('order-1');\n      expect(res.json).toHaveBeenCalledWith(mockOrder);\n    });\n    \n    it('should return 404 if order not found', async () => {\n      req.params.id = 'non-existent';\n      OrderModel.getOrderById.mockResolvedValue(null);\n      \n      await OrderController.getOrderById(req, res);\n      \n      expect(OrderModel.getOrderById).toHaveBeenCalledWith('non-existent');\n      expect(res.status).toHaveBeenCalledWith(404);\n      expect(res.json).toHaveBeenCalledWith({ error: 'Order not found' });\n    });\n    \n    it('should handle errors and return status 500', async () => {\n      req.params.id = 'order-1';\n      OrderModel.getOrderById.mockRejectedValue(new Error('Database error'));\n      \n      await OrderController.getOrderById(req, res);\n      \n      expect(OrderModel.getOrderById).toHaveBeenCalledWith('order-1');\n      expect(res.status).toHaveBeenCalledWith(500);\n      expect(res.json).toHaveBeenCalledWith(expect.objectContaining({\n        error: 'Failed to retrieve order'\n      }));\n    });\n  });\n\n  describe('getOrdersByUserId', () => {\n    it('should return orders by user ID with status 200', async () => {\n      req.params.userId = 'user-1';\n      OrderModel.getOrdersByUserId.mockResolvedValue([mockOrder]);\n      \n      await OrderController.getOrdersByUserId(req, res);\n      \n      expect(OrderModel.getOrdersByUserId).toHaveBeenCalledWith('user-1');\n      expect(res.json).toHaveBeenCalledWith([mockOrder]);\n    });\n    \n    it('should return 400 if user ID is missing', async () => {\n      req.params = {};\n      \n      await OrderController.getOrdersByUserId(req, res);\n      \n      expect(res.status).toHaveBeenCalledWith(400);\n      expect(res.json).toHaveBeenCalledWith({ error: 'User ID is required' });\n    });\n    \n    it('should handle errors and return status 500', async () => {\n      req.params.userId = 'user-1';\n      OrderModel.getOrdersByUserId.mockRejectedValue(new Error('Database error'));\n      \n      await OrderController.getOrdersByUserId(req, res);\n      \n      expect(OrderModel.getOrdersByUserId).toHaveBeenCalledWith('user-1');\n      expect(res.status).toHaveBeenCalledWith(500);\n      expect(res.json).toHaveBeenCalledWith(expect.objectContaining({\n        error: 'Failed to retrieve orders'\n      }));\n    });\n  });\n\n  describe('createOrder', () => {\n    it('should create a new order with status 201', async () => {\n      req.body = {\n        userId: 'user-1',\n        items: [{ productId: 'product-1', name: 'Product 1', price: 10, quantity: 2 }],\n        shippingAddress: { street: '123 Main St', city: 'Test City' }\n      };\n      \n      OrderModel.createOrder.mockResolvedValue(mockOrder);\n      \n      await OrderController.createOrder(req, res);\n      \n      expect(OrderModel.createOrder).toHaveBeenCalledWith(req.body);\n      expect(res.status).toHaveBeenCalledWith(201);\n      expect(res.json).toHaveBeenCalledWith(mockOrder);\n    });\n    \n    it('should return 400 if user ID is missing', async () => {\n      req.body = {\n        items: [{ productId: 'product-1', name: 'Product 1', price: 10, quantity: 2 }],\n        shippingAddress: { street: '123 Main St', city: 'Test City' }\n      };\n      \n      await OrderController.createOrder(req, res);\n      \n      expect(res.status).toHaveBeenCalledWith(400);\n      expect(res.json).toHaveBeenCalledWith({ error: 'User ID is required' });\n    });\n    \n    it('should return 400 if items are missing', async () => {\n      req.body = {\n        userId: 'user-1',\n        shippingAddress: { street: '123 Main St', city: 'Test City' }\n      };\n      \n      await OrderController.createOrder(req, res);\n      \n      expect(res.status).toHaveBeenCalledWith(400);\n      expect(res.json).toHaveBeenCalledWith({ error: 'Order must contain at least one item' });\n    });\n    \n    it('should return 400 if items array is empty', async () => {\n      req.body = {\n        userId: 'user-1',\n        items: [],\n        shippingAddress: { street: '123 Main St', city: 'Test City' }\n      };\n      \n      await OrderController.createOrder(req, res);\n      \n      expect(res.status).toHaveBeenCalledWith(400);\n      expect(res.json).toHaveBeenCalledWith({ error: 'Order must contain at least one item' });\n    });\n    \n    it('should return 400 if item is missing productId', async () => {\n      req.body = {\n        userId: 'user-1',\n        items: [{ name: 'Product 1', price: 10, quantity: 2 }],\n        shippingAddress: { street: '123 Main St', city: 'Test City' }\n      };\n      \n      await OrderController.createOrder(req, res);\n      \n      expect(res.status).toHaveBeenCalledWith(400);\n      expect(res.json).toHaveBeenCalledWith({ error: 'Item at index 0 is missing productId' });\n    });\n    \n    it('should return 400 if item has invalid quantity', async () => {\n      req.body = {\n        userId: 'user-1',\n        items: [{ productId: 'product-1', name: 'Product 1', price: 10, quantity: 0 }],\n        shippingAddress: { street: '123 Main St', city: 'Test City' }\n      };\n      \n      await OrderController.createOrder(req, res);\n      \n      expect(res.status).toHaveBeenCalledWith(400);\n      expect(res.json).toHaveBeenCalledWith({ error: 'Item at index 0 has invalid quantity' });\n    });\n    \n    it('should return 400 if shipping address is missing', async () => {\n      req.body = {\n        userId: 'user-1',\n        items: [{ productId: 'product-1', name: 'Product 1', price: 10, quantity: 2 }]\n      };\n      \n      await OrderController.createOrder(req, res);\n      \n      expect(res.status).toHaveBeenCalledWith(400);\n      expect(res.json).toHaveBeenCalledWith({ error: 'Shipping address is required' });\n    });\n    \n    it('should handle validation errors from model and return status 400', async () => {\n      req.body = {\n        userId: 'user-1',\n        items: [{ productId: 'product-1', name: 'Product 1', price: 10, quantity: 2 }],\n        shippingAddress: { street: '123 Main St', city: 'Test City' },\n        status: 'invalid-status'\n      };\n      \n      OrderModel.createOrder.mockRejectedValue(new Error('Invalid order status. Valid statuses are: pending, processing, shipped, delivered, cancelled'));\n      \n      await OrderController.createOrder(req, res);\n      \n      expect(OrderModel.createOrder).toHaveBeenCalledWith(req.body);\n      expect(res.status).toHaveBeenCalledWith(400);\n      expect(res.json).toHaveBeenCalledWith(expect.objectContaining({\n        error: 'Validation error'\n      }));\n    });\n    \n    it('should handle errors and return status 500', async () => {\n      req.body = {\n        userId: 'user-1',\n        items: [{ productId: 'product-1', name: 'Product 1', price: 10, quantity: 2 }],\n        shippingAddress: { street: '123 Main St', city: 'Test City' }\n      };\n      \n      OrderModel.createOrder.mockRejectedValue(new Error('Database error'));\n      \n      await OrderController.createOrder(req, res);\n      \n      expect(OrderModel.createOrder).toHaveBeenCalledWith(req.body);\n      expect(res.status).toHaveBeenCalledWith(500);\n      expect(res.json).toHaveBeenCalledWith(expect.objectContaining({\n        error: 'Failed to create order'\n      }));\n    });\n  });\n\n  describe('updateOrder', () => {\n    it('should update an existing order with status 200', async () => {\n      req.params.id = 'order-1';\n      req.body = { status: 'shipped' };\n      \n      OrderModel.getOrderById.mockResolvedValue(mockOrder);\n      OrderModel.updateOrder.mockResolvedValue({ ...mockOrder, status: 'shipped' });\n      \n      await OrderController.updateOrder(req, res);\n      \n      expect(OrderModel.getOrderById).toHaveBeenCalledWith('order-1');\n      expect(OrderModel.updateOrder).toHaveBeenCalledWith('order-1', req.body);\n      expect(res.json).toHaveBeenCalledWith({ ...mockOrder, status: 'shipped' });\n    });\n    \n    it('should return 404 if order not found', async () => {\n      req.params.id = 'non-existent';\n      req.body = { status: 'shipped' };\n      \n      OrderModel.getOrderById.mockResolvedValue(null);\n      \n      await OrderController.updateOrder(req, res);\n      \n      expect(OrderModel.getOrderById).toHaveBeenCalledWith('non-existent');\n      expect(res.status).toHaveBeenCalledWith(404);\n      expect(res.json).toHaveBeenCalledWith({ error: 'Order not found' });\n    });\n    \n    it('should handle invalid status error and return status 400', async () => {\n      req.params.id = 'order-1';\n      req.body = { status: 'invalid-status' };\n      \n      OrderModel.getOrderById.mockResolvedValue(mockOrder);\n      OrderModel.updateOrder.mockRejectedValue(new Error('Invalid order status'));\n      \n      await OrderController.updateOrder(req, res);\n      \n      expect(OrderModel.getOrderById).toHaveBeenCalledWith('order-1');\n      expect(OrderModel.updateOrder).toHaveBeenCalledWith('order-1', req.body);\n      expect(res.status).toHaveBeenCalledWith(400);\n      expect(res.json).toHaveBeenCalledWith(expect.objectContaining({\n        error: 'Invalid order status'\n      }));\n    });\n    \n    it('should handle errors and return status 500', async () => {\n      req.params.id = 'order-1';\n      req.body = { status: 'shipped' };\n      \n      OrderModel.getOrderById.mockResolvedValue(mockOrder);\n      OrderModel.updateOrder.mockRejectedValue(new Error('Database error'));\n      \n      await OrderController.updateOrder(req, res);\n      \n      expect(OrderModel.getOrderById).toHaveBeenCalledWith('order-1');\n      expect(OrderModel.updateOrder).toHaveBeenCalledWith('order-1', req.body);\n      expect(res.status).toHaveBeenCalledWith(500);\n      expect(res.json).toHaveBeenCalledWith(expect.objectContaining({\n        error: 'Failed to update order'\n      }));\n    });\n  });\n\n  describe('updateOrderStatus', () => {\n    it('should update order status with status 200', async () => {\n      req.params.id = 'order-1';\n      req.body = { status: 'shipped', note: 'Order has been shipped' };\n      \n      OrderModel.getOrderById.mockResolvedValue(mockOrder);\n      OrderModel.updateOrderStatus.mockResolvedValue({ ...mockOrder, status: 'shipped' });\n      \n      await OrderController.updateOrderStatus(req, res);\n      \n      expect(OrderModel.getOrderById).toHaveBeenCalledWith('order-1');\n      expect(OrderModel.updateOrderStatus).toHaveBeenCalledWith('order-1', 'shipped', 'Order has been shipped');\n      expect(res.json).toHaveBeenCalledWith({ ...mockOrder, status: 'shipped' });\n    });\n    \n    it('should return 400 if status is missing', async () => {\n      req.params.id = 'order-1';\n      req.body = { note: 'Order has been shipped' };\n      \n      await OrderController.updateOrderStatus(req, res);\n      \n      expect(res.status).toHaveBeenCalledWith(400);\n      expect(res.json).toHaveBeenCalledWith({ error: 'Status is required' });\n    });\n    \n    it('should return 404 if order not found', async () => {\n      req.params.id = 'non-existent';\n      req.body = { status: 'shipped' };\n      \n      OrderModel.getOrderById.mockResolvedValue(null);\n      \n      await OrderController.updateOrderStatus(req, res);\n      \n      expect(OrderModel.getOrderById).toHaveBeenCalledWith('non-existent');\n      expect(res.status).toHaveBeenCalledWith(404);\n      expect(res.json).toHaveBeenCalledWith({ error: 'Order not found' });\n    });\n    \n    it('should handle invalid status error and return status 400', async () => {\n      req.params.id = 'order-1';\n      req.body = { status: 'invalid-status' };\n      \n      OrderModel.getOrderById.mockResolvedValue(mockOrder);\n      OrderModel.updateOrderStatus.mockRejectedValue(new Error('Invalid order status'));\n      \n      await OrderController.updateOrderStatus(req, res);\n      \n      expect(OrderModel.getOrderById).toHaveBeenCalledWith('order-1');\n      expect(OrderModel.updateOrderStatus).toHaveBeenCalledWith('order-1', 'invalid-status', undefined);\n      expect(res.status).toHaveBeenCalledWith(400);\n      expect(res.json).toHaveBeenCalledWith(expect.objectContaining({\n        error: 'Invalid order status'\n      }));\n    });\n    \n    it('should handle errors and return status 500', async () => {\n      req.params.id = 'order-1';\n      req.body = { status: 'shipped' };\n      \n      OrderModel.getOrderById.mockResolvedValue(mockOrder);\n      OrderModel.updateOrderStatus.mockRejectedValue(new Error('Database error'));\n      \n      await OrderController.updateOrderStatus(req, res);\n      \n      expect(OrderModel.getOrderById).toHaveBeenCalledWith('order-1');\n      expect(OrderModel.updateOrderStatus).toHaveBeenCalledWith('order-1', 'shipped', undefined);\n      expect(res.status).toHaveBeenCalledWith(500);\n      expect(res.json).toHaveBeenCalledWith(expect.objectContaining({\n        error: 'Failed to update order status'\n      }));\n    });\n  });\n\n  describe('deleteOrder', () => {\n    it('should delete an existing order with status 204', async () => {\n      req.params.id = 'order-1';\n      \n      OrderModel.getOrderById.mockResolvedValue(mockOrder);\n      OrderModel.deleteOrder.mockResolvedValue(true);\n      \n      await OrderController.deleteOrder(req, res);\n      \n      expect(OrderModel.getOrderById).toHaveBeenCalledWith('order-1');\n      expect(OrderModel.deleteOrder).toHaveBeenCalledWith('order-1');\n      expect(res.status).toHaveBeenCalledWith(204);\n      expect(res.send).toHaveBeenCalled();\n    });\n    \n    it('should return 404 if order not found', async () => {\n      req.params.id = 'non-existent';\n      \n      OrderModel.getOrderById.mockResolvedValue(null);\n      \n      await OrderController.deleteOrder(req, res);\n      \n      expect(OrderModel.getOrderById).toHaveBeenCalledWith('non-existent');\n      expect(res.status).toHaveBeenCalledWith(404);\n      expect(res.json).toHaveBeenCalledWith({ error: 'Order not found' });\n    });\n    \n    it('should handle deletion failure and return status 500', async () => {\n      req.params.id = 'order-1';\n      \n      OrderModel.getOrderById.mockResolvedValue(mockOrder);\n      OrderModel.deleteOrder.mockResolvedValue(false);\n      \n      await OrderController.deleteOrder(req, res);\n      \n      expect(OrderModel.getOrderById).toHaveBeenCalledWith('order-1');\n      expect(OrderModel.deleteOrder).toHaveBeenCalledWith('order-1');\n      expect(res.status).toHaveBeenCalledWith(500);\n      expect(res.json).toHaveBeenCalledWith({ error: 'Failed to delete order' });\n    });\n    \n    it('should handle errors and return status 500', async () => {\n      req.params.id = 'order-1';\n      \n      OrderModel.getOrderById.mockResolvedValue(mockOrder);\n      OrderModel.deleteOrder.mockRejectedValue(new Error('Database error'));\n      \n      await OrderController.deleteOrder(req, res);\n      \n      expect(OrderModel.getOrderById).toHaveBeenCalledWith('order-1');\n      expect(OrderModel.deleteOrder).toHaveBeenCalledWith('order-1');\n      expect(res.status).toHaveBeenCalledWith(500);\n      expect(res.json).toHaveBeenCalledWith(expect.objectContaining({\n        error: 'Failed to delete order'\n      }));\n    });\n  });\n\n  describe('searchOrders', () => {\n    it('should search orders with status 200', async () => {\n      req.query = { userId: 'user-1', status: 'pending' };\n      \n      OrderModel.searchOrders.mockResolvedValue([mockOrder]);\n      \n      await OrderController.searchOrders(req, res);\n      \n      expect(OrderModel.searchOrders).toHaveBeenCalledWith({ userId: 'user-1', status: 'pending' });\n      expect(res.json).toHaveBeenCalledWith([mockOrder]);\n    });\n    \n    it('should handle date range search', async () => {\n      req.query = { startDate: '2023-01-01', endDate: '2023-01-31' };\n      \n      OrderModel.searchOrders.mockResolvedValue([mockOrder]);\n      \n      await OrderController.searchOrders(req, res);\n      \n      expect(OrderModel.searchOrders).toHaveBeenCalledWith({ startDate: '2023-01-01', endDate: '2023-01-31' });\n      expect(res.json).toHaveBeenCalledWith([mockOrder]);\n    });\n    \n    it('should handle product ID search', async () => {\n      req.query = { productId: 'product-1' };\n      \n      OrderModel.searchOrders.mockResolvedValue([mockOrder]);\n      \n      await OrderController.searchOrders(req, res);\n      \n      expect(OrderModel.searchOrders).toHaveBeenCalledWith({ productId: 'product-1' });\n      expect(res.json).toHaveBeenCalledWith([mockOrder]);\n    });\n    \n    it('should handle errors and return status 500', async () => {\n      req.query = { userId: 'user-1' };\n      \n      OrderModel.searchOrders.mockRejectedValue(new Error('Database error'));\n      \n      await OrderController.searchOrders(req, res);\n      \n      expect(OrderModel.searchOrders).toHaveBeenCalledWith({ userId: 'user-1' });\n      expect(res.status).toHaveBeenCalledWith(500);\n      expect(res.json).toHaveBeenCalledWith(expect.objectContaining({\n        error: 'Failed to search orders'\n      }));\n    });\n  });\n\n  describe('getOrdersByStatus', () => {\n    it('should get orders by status with status 200', async () => {\n      req.params.status = 'pending';\n      \n      OrderModel.getOrdersByStatus.mockResolvedValue([mockOrder]);\n      \n      await OrderController.getOrdersByStatus(req, res);\n      \n      expect(OrderModel.getOrdersByStatus).toHaveBeenCalledWith('pending');\n      expect(res.json).toHaveBeenCalledWith([mockOrder]);\n    });\n    \n    it('should return 400 if status is missing', async () => {\n      req.params = {};\n      \n      await OrderController.getOrdersByStatus(req, res);\n      \n      expect(res.status).toHaveBeenCalledWith(400);\n      expect(res.json).toHaveBeenCalledWith({ error: 'Status parameter is required' });\n    });\n    \n    it('should return 400 for invalid status', async () => {\n      req.params.status = 'invalid-status';\n      \n      await OrderController.getOrdersByStatus(req, res);\n      \n      expect(res.status).toHaveBeenCalledWith(400);\n      expect(res.json).toHaveBeenCalledWith({ error: 'Invalid order status: invalid-status' });\n    });\n    \n    it('should handle errors and return status 500', async () => {\n      req.params.status = 'pending';\n      \n      OrderModel.getOrdersByStatus.mockRejectedValue(new Error('Database error'));\n      \n      await OrderController.getOrdersByStatus(req, res);\n      \n      expect(OrderModel.getOrdersByStatus).toHaveBeenCalledWith('pending');\n      expect(res.status).toHaveBeenCalledWith(500);\n      expect(res.json).toHaveBeenCalledWith(expect.objectContaining({\n        error: 'Failed to retrieve orders by status'\n      }));\n    });\n  });\n\n  describe('getOrderCounts', () => {\n    it('should get order counts with status 200', async () => {\n      const mockCounts = {\n        pending: 1,\n        processing: 0,\n        shipped: 1,\n        delivered: 0,\n        cancelled: 0\n      };\n      \n      OrderModel.countOrdersByStatus.mockResolvedValue(mockCounts);\n      \n      await OrderController.getOrderCounts(req, res);\n      \n      expect(OrderModel.countOrdersByStatus).toHaveBeenCalled();\n      expect(res.json).toHaveBeenCalledWith(mockCounts);\n    });\n    \n    it('should handle errors and return status 500', async () => {\n      OrderModel.countOrdersByStatus.mockRejectedValue(new Error('Database error'));\n      \n      await OrderController.getOrderCounts(req, res);\n      \n      expect(OrderModel.countOrdersByStatus).toHaveBeenCalled();\n      expect(res.status).toHaveBeenCalledWith(500);\n      expect(res.json).toHaveBeenCalledWith(expect.objectContaining({\n        error: 'Failed to get order counts'\n      }));\n    });\n  });\n});