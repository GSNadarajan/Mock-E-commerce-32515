const fs = require('fs').promises;\nconst fsExtra = require('fs-extra');\nconst path = require('path');\nconst ProductModel = require('../../products/models/productModel');\n\n// Mock fs and fs-extra modules\njest.mock('fs', () => ({\n  promises: {\n    readFile: jest.fn(),\n    writeFile: jest.fn(),\n    access: jest.fn(),\n    rename: jest.fn()\n  }\n}));\n\njest.mock('fs-extra', () => ({\n  ensureDir: jest.fn()\n}));\n\njest.mock('uuid', () => ({\n  v4: jest.fn(() => 'test-uuid')\n}));\n\ndescribe('ProductModel', () => {\n  const mockProductsData = {\n    schemaVersion: '1.0',\n    products: [\n      {\n        id: 'product-1',\n        name: 'Test Product 1',\n        description: 'This is test product 1',\n        price: 19.99,\n        category: 'electronics',\n        imageUrl: 'http://example.com/image1.jpg',\n        stock: 10,\n        createdAt: '2023-01-01T00:00:00.000Z',\n        updatedAt: '2023-01-01T00:00:00.000Z'\n      },\n      {\n        id: 'product-2',\n        name: 'Test Product 2',\n        description: 'This is test product 2',\n        price: 29.99,\n        category: 'clothing',\n        imageUrl: 'http://example.com/image2.jpg',\n        stock: 20,\n        createdAt: '2023-01-02T00:00:00.000Z',\n        updatedAt: '2023-01-02T00:00:00.000Z'\n      }\n    ]\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Mock successful file read\n    fs.readFile.mockResolvedValue(JSON.stringify(mockProductsData));\n    // Mock successful directory creation\n    fsExtra.ensureDir.mockResolvedValue();\n    // Mock successful file write\n    fs.writeFile.mockResolvedValue();\n    // Mock successful file rename\n    fs.rename.mockResolvedValue();\n    // Mock successful file access\n    fs.access.mockResolvedValue();\n  });\n\n  describe('initialize', () => {\n    it('should initialize products.json if it does not exist', async () => {\n      fs.access.mockRejectedValueOnce(new Error('ENOENT'));\n      \n      await ProductModel.initialize();\n      \n      expect(fsExtra.ensureDir).toHaveBeenCalled();\n      expect(fs.writeFile).toHaveBeenCalled();\n      expect(fs.rename).toHaveBeenCalled();\n    });\n\n    it('should handle invalid JSON structure', async () => {\n      fs.readFile.mockResolvedValueOnce('invalid json');\n      \n      await ProductModel.initialize();\n      \n      expect(fsExtra.ensureDir).toHaveBeenCalled();\n      expect(fs.writeFile).toHaveBeenCalled();\n    });\n\n    it('should handle missing products array', async () => {\n      fs.readFile.mockResolvedValueOnce(JSON.stringify({ schemaVersion: '1.0' }));\n      \n      await ProductModel.initialize();\n      \n      expect(fsExtra.ensureDir).toHaveBeenCalled();\n      expect(fs.writeFile).toHaveBeenCalled();\n    });\n\n    it('should add schema version if missing', async () => {\n      fs.readFile.mockResolvedValueOnce(JSON.stringify({ products: [] }));\n      \n      await ProductModel.initialize();\n      \n      expect(fsExtra.ensureDir).toHaveBeenCalled();\n      expect(fs.writeFile).toHaveBeenCalled();\n    });\n  });\n\n  describe('_readData', () => {\n    it('should read and parse products data', async () => {\n      const result = await ProductModel._readData();\n      \n      expect(fs.readFile).toHaveBeenCalled();\n      expect(result).toEqual(mockProductsData);\n    });\n\n    it('should handle file not found error', async () => {\n      fs.readFile.mockRejectedValueOnce({ code: 'ENOENT' });\n      \n      await ProductModel._readData();\n      \n      expect(fs.access).toHaveBeenCalled();\n    });\n\n    it('should handle JSON parse error', async () => {\n      fs.readFile.mockResolvedValueOnce('invalid json');\n      \n      await expect(ProductModel._readData()).rejects.toThrow('Error parsing product data');\n    });\n  });\n\n  describe('_writeData', () => {\n    it('should write data to file', async () => {\n      await ProductModel._writeData(mockProductsData);\n      \n      expect(fsExtra.ensureDir).toHaveBeenCalled();\n      expect(fs.writeFile).toHaveBeenCalled();\n      expect(fs.rename).toHaveBeenCalled();\n    });\n\n    it('should throw error for invalid data structure', async () => {\n      await expect(ProductModel._writeData({ invalid: 'data' })).rejects.toThrow('Invalid data structure');\n    });\n  });\n\n  describe('getAllProducts', () => {\n    it('should return all products', async () => {\n      const products = await ProductModel.getAllProducts();\n      \n      expect(products).toEqual(mockProductsData.products);\n    });\n  });\n\n  describe('getProductById', () => {\n    it('should return product by ID', async () => {\n      const product = await ProductModel.getProductById('product-1');\n      \n      expect(product).toEqual(mockProductsData.products[0]);\n    });\n\n    it('should return null for non-existent product', async () => {\n      const product = await ProductModel.getProductById('non-existent');\n      \n      expect(product).toBeNull();\n    });\n  });\n\n  describe('createProduct', () => {\n    it('should create a new product', async () => {\n      const productData = {\n        name: 'New Product',\n        description: 'This is a new product',\n        price: 39.99,\n        category: 'books',\n        imageUrl: 'http://example.com/image3.jpg',\n        stock: 30\n      };\n      \n      const newProduct = await ProductModel.createProduct(productData);\n      \n      expect(newProduct).toHaveProperty('id', 'test-uuid');\n      expect(newProduct).toHaveProperty('name', 'New Product');\n      expect(newProduct).toHaveProperty('price', 39.99);\n      expect(newProduct).toHaveProperty('createdAt');\n      expect(newProduct).toHaveProperty('updatedAt');\n      expect(fs.writeFile).toHaveBeenCalled();\n      expect(fs.rename).toHaveBeenCalled();\n    });\n\n    it('should throw error for missing required fields', async () => {\n      const productData = {\n        description: 'This is a new product',\n        category: 'books'\n      };\n      \n      await expect(ProductModel.createProduct(productData)).rejects.toThrow('Product name and price are required');\n    });\n  });\n\n  describe('updateProduct', () => {\n    it('should update an existing product', async () => {\n      const updateData = {\n        name: 'Updated Product',\n        price: 49.99\n      };\n      \n      const updatedProduct = await ProductModel.updateProduct('product-1', updateData);\n      \n      expect(updatedProduct).toHaveProperty('name', 'Updated Product');\n      expect(updatedProduct).toHaveProperty('price', 49.99);\n      expect(updatedProduct).toHaveProperty('updatedAt');\n      expect(fs.writeFile).toHaveBeenCalled();\n      expect(fs.rename).toHaveBeenCalled();\n    });\n\n    it('should return null for non-existent product', async () => {\n      const updateData = {\n        name: 'Updated Product',\n        price: 49.99\n      };\n      \n      const updatedProduct = await ProductModel.updateProduct('non-existent', updateData);\n      \n      expect(updatedProduct).toBeNull();\n    });\n  });\n\n  describe('deleteProduct', () => {\n    it('should delete an existing product', async () => {\n      const result = await ProductModel.deleteProduct('product-1');\n      \n      expect(result).toBe(true);\n      expect(fs.writeFile).toHaveBeenCalled();\n      expect(fs.rename).toHaveBeenCalled();\n    });\n\n    it('should return false for non-existent product', async () => {\n      const result = await ProductModel.deleteProduct('non-existent');\n      \n      expect(result).toBe(false);\n    });\n  });\n\n  describe('searchProducts', () => {\n    it('should search products by name', async () => {\n      const products = await ProductModel.searchProducts('Test Product 1');\n      \n      expect(products).toEqual([mockProductsData.products[0]]);\n    });\n\n    it('should search products by description', async () => {\n      const products = await ProductModel.searchProducts('test product 2');\n      \n      expect(products).toEqual([mockProductsData.products[1]]);\n    });\n\n    it('should return empty array for no matches', async () => {\n      const products = await ProductModel.searchProducts('non-existent');\n      \n      expect(products).toEqual([]);\n    });\n  });\n\n  describe('findProductsByCategory', () => {\n    it('should find products by category', async () => {\n      const products = await ProductModel.findProductsByCategory('electronics');\n      \n      expect(products).toEqual([mockProductsData.products[0]]);\n    });\n\n    it('should return empty array for non-existent category', async () => {\n      const products = await ProductModel.findProductsByCategory('non-existent');\n      \n      expect(products).toEqual([]);\n    });\n  });\n\n  describe('countProducts', () => {\n    it('should count total products', async () => {\n      const count = await ProductModel.countProducts();\n      \n      expect(count).toBe(2);\n    });\n  });\n});